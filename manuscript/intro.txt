# 1. Introduction
In recently years, tech startup culture has reached its momentum, and the digital contents on the internet are no longer static and read-only but have long transformed into rich applications and services tied to one another by data and APIs, forming a gigantic web of supply chains.

Today, as more and more people are connected to the internet, speed and response time have become a primary concern in any scalable application. Many programming languages have embraced the non-blocking, asynchronous computing to leverage the power of today's machines. Computers are no longer doing one thing really fast, but they are required to multi-task to be able to serve the needs from millions of users.

Go was created at Google as an improvement to C language. While C is considered the most efficient language second only to Assembly, it is old and (arguably) not suitable for modern distributed systems in terms of scalability and concurrency. Goâ€™s objective is to be as concise, quick to write and concurrent as a scripting language while being more performant. You will soon realize how Go gives you the best of both world--the dynamicity and simplicity of a scripting language like Python and performance of a compiled, strongly-typed one like C. And after all, Go is crazy fun and deceptively simple!

I want to write a book that will guide you toward building a web application as quick as possible without spending too much time on text and theories, therefore I will tend to cover the basics very lightly and focus on them as we build the project. As Go itself has a very rich set of built-in packages which can get you very far down the road, I won't be adopting any framework to complicate the tasks and deviate you from understanding the idiomatic core other than just a few external packages that may fill in the weak spots of the built-in ones.

I hope you'll enjoy hacking in Go as much as I do!

# 2. Prerequisites
It's possible to go through this book with only a basic familiarity of a programming language like Javascript, Python and etc. However, it will prove useful if you have some familiarities with web development using such language so at least you know about the server and client and how they are different.
This book is constantly changing, and your feedbacks are welcomed to make the book better and appeal more to the majority of the readers.


# 3. Getting Started
## 3.1 Command Line
Go has a few Command Line Interfaces (CLI) up its sleeve from prettifying to running your code. You'll be spending a lot of time on the command line.

+ On Mac OSX, you'll likely be using *Terminal*.
+ On Windows, you'll be using the *Command Prompt*.
+ If you're on Linux, you probably already know what you're doing.

Open your dedicated command line application and head right to the next section.

## 3.2 Installing Go
At the current time, Go is supported on almost all platforms:

+ OS X 10.8 or later
+ Windows XP or later
+ Linux 2.6.23 or later

The easiest way is to head to the ![download page](https://golang.org/dl/), download the binary and and install. If you would like a step-by-step wizard-style guide, check out this ![excellent instruction](https://www.golang-book.com/guides/machine_setup) to set up everything you need to start.

## 3.3 The Editor
While an editor for any language is a matter of choice, on the previous instruction link you'll find a download link for ![Atom](https://atom.io/). Atom is a text editor from ![Github](https://github.com) with a really nice interface and decent plugin for Golang. Other choices include ![Textmate](https://macromates.com/) (for Mac OS X), ![Sublime](http://www.sublimetext.com/), and ![LiteIDE](https://github.com/visualfc/liteide), which is dedicated for Go. Optionally, you can use Vim or Emacs if you don't want to switch between your command line application and the IDE.
