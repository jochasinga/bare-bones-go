# 1. Introduction
In recently years, tech startup culture has reached its peakest momentum, and the digital contents on the internet are no longer static and read-only but have long transformed into rich applications and services tied to one another by data and APIs, forming a gigantic web of supply chains.

Today, as more and more people are connected to the internet, speed and response time have become a primary concern in any scalable application. Many programming languages have embraced the non-blocking, asynchronous computing to leverage the power of today's machines. Computers are no longer doing one thing really fast, but they are required to multi-task to be able to serve the needs from millions of users.

Go was created at Google as an improvement to C language. While C is considered the most efficient language second only to Assembly, it is old and not suitable for modern web development in terms of scalability and concurrency. Goâ€™s objective is to be as concise, quick and concurrent as a scripting language while still being as performant as a compiled language like C. You will soon see how Go gives you the best of both world--the dynamicity of a scripting language and a fast, strong typing of a compiled one.

My intention is to write a book that will guide you toward building a web application as fast as possible without spending too much time on text and theories. As Go itself has a very rich set of built-in packages which can get you very far down the road, I won't be adopting any framework to complicate the tasks and deviate you from understanding the idiomatic core other than just a few external packages that may fill in the weak spots of the built-in ones.

I hope you'll enjoy coding in Go as much as I do!

# 2. Getting Started
## 2.1 Command Line
Go has a few Command Line Interfaces (CLI) up its sleeve from prettifying to running your code. You'll be spending a lot of time on the command line.

+ On Mac OSX, you'll likely be using *Terminal*.
+ On Windows, you'll be using the *Command Prompt*.
+ If you're on Linux, you probably already know what you're doing.

Open your dedicated command line application and head right to the next section.

## 2.2 Installing Go
At the current time, Go is supported on almost all platforms:

+ OS X 10.8 or later
+ Windows XP or later
+ Linux 2.6.23 or later

The easiest way is to head to the ![download page](https://golang.org/dl/), download the binary and and install. If you would like a step-by-step wizard-style guide, check out this ![excellent instruction](https://www.golang-book.com/guides/machine_setup) to set up everything you need to start.

## 2.3 The Editor
While an editor for any language is a matter of choice, on the previous instruction link you'll find a download link for ![Atom](https://atom.io/). Atom is a text editor from ![Github](https://github.com) with a really nice interface and decent plugin for Golang. Other choices include ![Textmate](https://macromates.com/) (for Mac OS X), ![Sublime](http://www.sublimetext.com/), and ![LiteIDE](https://github.com/visualfc/liteide), which is dedicated for Go. Optionally, you can use Vim or Emacs if you don't want to switch between your command line application and the IDE.
